/* File: AuthorsBusinessLogic.java
 * Author: Alfredo Kylle Navarro III
 * Date: 2023
 * Description: Lab 02 DAO design pattern
 */
package dataaccesslayer;

import java.sql.ResultSetMetaData;
import java.util.List;

import transferobjects.ReceipientsDTO;

import java.util.ArrayList;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ReceipientsDaoImpl implements ReceipientsDao{

	@Override
	public List<ReceipientsDTO> getAllReceipients() {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<ReceipientsDTO> receipients = new ArrayList<ReceipientsDTO>();
		try{ 
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"SELECT AwardID, Category, City, Name, Year FROM Recipients ORDER BY AwardID");
			rs = pstmt.executeQuery();
			
			while(rs.next()){
				ReceipientsDTO receipient = new ReceipientsDTO();
				receipient.setAwardID(rs.getInt("AwardID"));
				receipient.setCategory(rs.getString("Category"));
				receipient.setCity(rs.getString("City"));
                                receipient.setName(rs.getString("Name"));
                                receipient.setYear(rs.getInt("Year"));
				receipients.add(receipient);
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return receipients;
	}

	@Override
	public ReceipientsDTO getReceipientById(Integer awardID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ReceipientsDTO receipient = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"SELECT AwardID, Category, City, Name, Year FROM Recipients WHERE AwardID = ?");
			pstmt.setInt(1, awardID.intValue());
			rs = pstmt.executeQuery();
			while(rs.next()){
				receipient = new ReceipientsDTO();
				receipient.setAwardID(rs.getInt("AwardID"));
				receipient.setCategory(rs.getString("Category"));
				receipient.setCity(rs.getString("City"));
                                receipient.setName(rs.getString("Name"));
                                receipient.setYear(rs.getInt("Year"));
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return receipient;
	}

	@Override
	public void addReceipient(ReceipientsDTO receipient) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			// do not insert AuthorID, it is generated by Database
			pstmt = con.prepareStatement(
					"INSERT INTO Recipients (Name, City, Category, Year) " +
			        "VALUES(?, ?, ?, ?)");
			pstmt.setString(1, receipient.getName());
			pstmt.setString(2, receipient.getCity());
                        pstmt.setString(3, receipient.getCategory());
			pstmt.setInt(4, receipient.getYear());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}

	@Override
	public void updateReceipient(ReceipientsDTO receipient) {
			Connection con = null;
			PreparedStatement pstmt = null;
			try{
				DataSource ds = new DataSource();
				con = ds.createConnection();
				pstmt = con.prepareStatement(
						"UPDATE Recipients SET Name = ?, " 
                                                + " City = ?, Category = ?, Year = ? WHERE AwardID = ?" );
                               
                                pstmt.setString(1, receipient.getName());
                                pstmt.setString(2, receipient.getCity());
                                pstmt.setString(3, receipient.getCategory());
                                pstmt.setInt(4, receipient.getYear().intValue());
                                pstmt.setInt(5,receipient.getAwardID().intValue());
				pstmt.executeUpdate();
			}
			catch(SQLException e){
				e.printStackTrace();
			}
			finally{
				try{ if(pstmt != null){ pstmt.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
				try{ if(con != null){ con.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
			}
	}

	@Override
	public void deleteReceipient(ReceipientsDTO receipient) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"DELETE FROM Recipients WHERE AwardID = ?");	
			pstmt.setInt(1, receipient.getAwardID().intValue());
                       
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}
        
        @Override
        public void printMetaData() {
            Connection con = null;
            PreparedStatement ps = null;
            ResultSet rs = null;

            try {
                DataSource ds = new DataSource();
                con = ds.createConnection();

                String query = "SELECT * FROM Recipients";
                ps = con.prepareStatement(query);
                rs = ps.executeQuery();

                ResultSetMetaData rsMetaData = rs.getMetaData();
                int columnCount = rsMetaData.getColumnCount();

                for (int i = 1; i <= columnCount; i++) {
                    String javaClass = rsMetaData.getColumnClassName(i);
                    String columnName = rsMetaData.getColumnName(i);
                    String columnType = rsMetaData.getColumnTypeName(i);

                    System.out.println("Column Name: " + columnName);
                    System.out.println("Column Type: " + columnType);
                    System.out.println("Corresponding Java Class: " + javaClass);
                    System.out.println("---------------------------");
                }

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    if (rs != null) { 
                        rs.close(); 
                    }
                    if (ps != null) { 
                        ps.close(); 
                    }
                    if (con != null) { 
                        con.close(); 
                    }
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                }
            }
}


}

